#!/bin/bash
#
# Embed hash replaces `$Hash$` to `$Hash:{sha224sum}$`
# When calculating the hash, `$Hash:...$` should be treated as `$Hash$`.
#
# Usage: hash-embed update-all
#
# Sub-commands
#     calc {files}      calculate new hash value for files
#     extract {files}   extract current hash value from files
#     verify {files}    Verify that the file hash value matches
#     update {files}    update hash value in files
#     list              list target files which have embeded hash
#
#     calc-all          calc hash values for files w/ `$Hash$` tag
#     extract-all       extract hash values from files w/ `$Hash$` tag
#     update-all        update hash values in files w/ `$Hash$` tag
#
#     copy              copy files w/`$Hash$` tag to current directory
#     clean-backup      remove *.bak files created by copy sub command

set -eu

calc() {
  sed -E -e 's/\$Hash:[^$]*\$/\$Hash\$/' "$1" | sha224sum | cut -f 1 -d ' '
}

extract() {
  if [ "$1" == "hash-embed" ] ; then
    hash="(skipped)"
  elif [ -f "$1" ] ; then
    hash=$(sed -nEr 's/.*\$Hash:([^$]*)\$.*/\1/p' "$1")
    if [ -z "$hash" ] ; then
      hash="(no hash)"
    fi
  else
    hash="(not a file)"
  fi
  echo "$hash"
}

verify() {
  if [ ! -f "$1" ] ; then
    echo "NOT_FOUND"
    return
  fi
  want=$(extract "$1")
  got=$(calc "$1")
  if [ "$got" == "$want" ] ; then
    echo "OK"
  else
    echo "FAILED"
  fi
}

list() {
  grep --exclude='hash-embed*' -lrE '\$Hash(:[^$]*)?\$'
}

update() {
  old=$(extract "$1")
  new=$(calc "$1")
  if [ "$new" != "$old" ] ; then
    echo -e "$f\n    Old: $old\n    New: $new"
    sed -i.bak -E -e "s/\\\$Hash(:[^\\$]*)?\\$/\$Hash:${new}\$/" "$1"
    rm -f "$1.bak"
  fi
}

subcmd_calc() {
  for f in "$@" ; do
    hash=$(calc "$f")
    printf "%-56s  %s\n" "$hash" "$f"
  done
}

subcmd_extract() {
  for f in "$@" ; do
    hash=$(extract "$f")
    printf "%-56s  %s\n" "$hash" "$f"
  done
}

subcmd_verify() {
  for f in "$@" ; do
    printf "%s: %s\n" "$f" $(verify "$f")
  done
}

subcmd_list() {
  list
}

subcmd_update() {
  for f in "$@" ; do
    update "$f"
  done
}

subcmd_calc_all() {
  subcmd_calc $(list)
}

subcmd_extract_all() {
  subcmd_extract $(list)
}

subcmd_update_all() {
  subcmd_update $(list)
}

subcmd_copy() {
  srcdir=$(dirname "$0")
  files=$( cd $srcdir && list )
  for file in $files ; do
    if [ -f "$file" ] ; then
      # Create a backup of local files if they have changed
      if [ $(verify "$file") != "OK" ] ; then
        rm -f "$file.bak"
        mv "$file" "$file.bak"
        cp "${srcdir}/${file}" "$file"
        echo "${file}: COPIED_WITH_BACKUP"
        continue
      fi
      if [ $(calc "$srcdir/$file") == $(calc "$file") ] ; then
        echo "${file}: NO_CHANGES"
        continue
      fi
    fi
    cp "${srcdir}/${file}" "$file"
    echo "${file}: COPIED"
  done
}

subcmd_clean_backup() {
  srcdir=$(dirname "$0")
  files=$( cd $srcdir && list )
  for file in $files ; do
    rm -f "$file.bak"
  done
}

case $1 in
  calc)
    shift
    subcmd_calc "$@"
    ;;
  extract)
    shift
    subcmd_extract "$@"
    ;;
  verify)
    shift
    subcmd_verify "$@"
    ;;
  update)
    shift
    subcmd_update "$@"
    ;;
  list)
    subcmd_list
    ;;
  calc-all)
    subcmd_calc_all
    ;;
  extract-all)
    subcmd_extract_all
    ;;
  update-all)
    subcmd_update_all
    ;;
  copy)
    subcmd_copy
    ;;
  clean-backup)
    subcmd_clean_backup
    ;;
esac
